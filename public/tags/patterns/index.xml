<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patterns on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</title>
    <link>http://paul-lysak.github.io/public/tags/patterns/</link>
    <description>Recent content in Patterns on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Dec 2012 19:19:00 +0200</lastBuildDate>
    
	<atom:link href="http://paul-lysak.github.io/public/tags/patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Antipatterns: initialization after usage</title>
      <link>http://paul-lysak.github.io/public/blog/2012-12-19-antipatterns-initialization-after-usage/</link>
      <pubDate>Wed, 19 Dec 2012 19:19:00 +0200</pubDate>
      
      <guid>http://paul-lysak.github.io/public/blog/2012-12-19-antipatterns-initialization-after-usage/</guid>
      <description>I&#39;ve seen such problem fiew times and I&#39;m going to describe it as an antipattern - let&#39;s call it &#34;initialization after usage&#34;. It could sound a bit like Captain Obvious, but isn&#39;t it typical for some pattern/antipattern catalogs? :)
The problem:There is an object which has some fields initialized in one place, some in completely different place, and in the meantime the object is used somewhere. So when using the object it&#39;s not clear if its fields are completely initialized or not.</description>
    </item>
    
  </channel>
</rss>