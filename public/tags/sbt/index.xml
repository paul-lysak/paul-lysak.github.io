<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sbt on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</title>
    <link>/tags/sbt/</link>
    <description>Recent content in Sbt on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 May 2016 14:32:00 +0300</lastBuildDate>
    
	<atom:link href="/tags/sbt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cross-version testing with SBT</title>
      <link>/blog/2016-05-13-cross-version-testing-with-sbt/</link>
      <pubDate>Fri, 13 May 2016 14:32:00 +0300</pubDate>
      
      <guid>/blog/2016-05-13-cross-version-testing-with-sbt/</guid>
      <description>I’d like to share my experience on testing versions compatibility with sbt. The system which had to be tested consists of server (Play application) and a client - library that exposes server functionality to other apps. Not all apps that use client library may be updated fast enough with new version of server, so before deploying new server version we must check that client versions which are in use currently keep working.</description>
    </item>
    
    <item>
      <title>javaOptions in sbt integration tests</title>
      <link>/blog/2015-11-13-javaoptions-in-sbt-integration-tests/</link>
      <pubDate>Fri, 13 Nov 2015 08:40:00 +0200</pubDate>
      
      <guid>/blog/2015-11-13-javaoptions-in-sbt-integration-tests/</guid>
      <description>My goal was to make separate config files for run, tests, and integration tests in Play application - so that default settings for database in run and integration test environments would be different, and in tests database settings would be unavailable to make sure that no unit test works with real DB. This may be achieved via config.resource system property. I’ve tried to apply solution from http://stackoverflow.com/questions/15399161/how-do-i-specify-a-config-file-with-sbt-0-12-2-for-sbt-test with such code in build.</description>
    </item>
    
    <item>
      <title>SBT integration tests: automatically launch application</title>
      <link>/blog/2015-02-07-sbt-integration-tests-automatically/</link>
      <pubDate>Sat, 07 Feb 2015 14:16:00 +0200</pubDate>
      
      <guid>/blog/2015-02-07-sbt-integration-tests-automatically/</guid>
      <description>I’d like to share my experience in automatic launch of tested web application in SBT (tested with version 0.13.6) before running integration tests and shutting it down after tests. That wasn’t very straight-forward and involved custom tasks creation. I’d be happy to hear about easier ways if you know some.
SBT documentation about testing describes how to enable integration tests and run custom code before them via testOptions in IntegrationTest += Tests.</description>
    </item>
    
    <item>
      <title>Sbt repository authentication</title>
      <link>/blog/2014-12-16-sbt-repository-authentication/</link>
      <pubDate>Tue, 16 Dec 2014 15:53:00 +0200</pubDate>
      
      <guid>/blog/2014-12-16-sbt-repository-authentication/</guid>
      <description>Here is brief instruction how to access repositories protected by basic authentication from sbt - checked with version 0.13. That&#39;s how one would configure custom repository in .sbt file: resolvers ++= Seq(
..
&#34;MyRepositoryName&#34; at &#34;http://repository.host.com/nexus/content/repositories/releases&#34;,
...
)
 If repository requires authentication - sbt would just show rather meaningless warning and claim that artifact isn&#39;t found: [warn] ==== MyRepositoryName: tried
[warn] http://repository.host.com/nexus/content/repositories/releases/... here goes path to artifact ...
 You&#39;ll need to know authentication realm returned by repository server in order to configure credentials.</description>
    </item>
    
    <item>
      <title>Integration test sources with eclipse-sbt</title>
      <link>/blog/2014-07-06-integration-test-sources-with-eclipse/</link>
      <pubDate>Sun, 06 Jul 2014 14:32:00 +0300</pubDate>
      
      <guid>/blog/2014-07-06-integration-test-sources-with-eclipse/</guid>
      <description>Finally found this answer: http://stackoverflow.com/questions/23229864/how-can-i-show-a-source-directory-to-sbteclipse-without-adding-it-to-the-compile to a question: how to include integration test sources in Scala IDE (Eclipse) - just add the following line to your build.sbt: EclipseKeys.configurations := Set(Compile, Test, IntegrationTest)</description>
    </item>
    
  </channel>
</rss>