<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</title>
    <link>https://paul-lysak.github.io/tags/scala/</link>
    <description>Recent content in Scala on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Dec 2016 19:25:00 +0200</lastBuildDate>
    
	<atom:link href="https://paul-lysak.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mockito and default parameters in Scala</title>
      <link>https://paul-lysak.github.io/posts/2016-12-05-mockito-and-default-parameters-in-scala/</link>
      <pubDate>Mon, 05 Dec 2016 19:25:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-12-05-mockito-and-default-parameters-in-scala/</guid>
      <description>Suppose we need to mock such service and verify that doSomething is called exactly once, and then no interaction happens with the service:
class SomeService {
def doSomething(from: Int = 0, to: Int = 10): Unit = {
//... implementation ...
}
//... other methods ...
}
 A common approach to do it:
val serviceMock = Mockito.mock(classOf[SomeService])
//run tested code which invokes this:
serviceMock.doSomething() Mockito.verify(serviceMock).search(0, 10)
Mockito.verifyNoMoreInteractions(serviceMock)
 But here’s surprise: it fails with such error message:</description>
    </item>
    
    <item>
      <title>Play, ScalaTest and afterAll: There is no started application</title>
      <link>https://paul-lysak.github.io/posts/2016-09-01-play-scalatest-and-afterall-there-is-no/</link>
      <pubDate>Thu, 01 Sep 2016 19:07:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-09-01-play-scalatest-and-afterall-there-is-no/</guid>
      <description>Recently I was trying to do some cleanup of shared DB after the tests (with ScalaTest) of Play application using afterAll method of BeforeAndAfterAll trait. DB credentials were contained in Play’s config files so cleanup code relied on running play application. But when trying to run the test I’ve got an exception:
java.lang.RuntimeException: There is no started application
 Looks like application was shut down before afterAll gets started. Turns out that traits inclusion order matters here.</description>
    </item>
    
    <item>
      <title>Why I dislike Scala enums</title>
      <link>https://paul-lysak.github.io/posts/2016-08-23-why-i-dislike-scala-enums/</link>
      <pubDate>Tue, 23 Aug 2016 19:42:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-08-23-why-i-dislike-scala-enums/</guid>
      <description>I came to conclusion that even in fully-Scala projects it’s better to define enums using Java. Even third-party libraries that have support for Scala enums suffer from the fact that in runtime all Scala enums have the same type. So if you get some enum value - you have no way to tell to which enum type does it belong. Let me show you how bad it can be with json4s.</description>
    </item>
    
    <item>
      <title>Generics with Play JSON</title>
      <link>https://paul-lysak.github.io/posts/2016-06-16-generics-with-play-json/</link>
      <pubDate>Thu, 16 Jun 2016 18:49:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-06-16-generics-with-play-json/</guid>
      <description>As Play JSON library uses implicits in order to know how to serialize/deserialize some object the type of that object has to be known at compile time. This makes serializing/deserializing generic classes not that straightforward - even if you know at compile time type which is substituted in generic class type parameter, you need to provide somehow reads/writes for each such type, not just for single generic class. The trick is to use def instead of val.</description>
    </item>
    
    <item>
      <title>Cross-version testing with SBT</title>
      <link>https://paul-lysak.github.io/posts/2016-05-13-cross-version-testing-with-sbt/</link>
      <pubDate>Fri, 13 May 2016 14:32:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-05-13-cross-version-testing-with-sbt/</guid>
      <description>I’d like to share my experience on testing versions compatibility with sbt. The system which had to be tested consists of server (Play application) and a client - library that exposes server functionality to other apps. Not all apps that use client library may be updated fast enough with new version of server, so before deploying new server version we must check that client versions which are in use currently keep working.</description>
    </item>
    
    <item>
      <title>Scala Parser Combinators Quickstart</title>
      <link>https://paul-lysak.github.io/posts/2016-03-19-scala-parser-combinators-quickstart/</link>
      <pubDate>Sat, 19 Mar 2016 18:52:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-03-19-scala-parser-combinators-quickstart/</guid>
      <description>Parsing may be a challenging task. And it’s amazing how Scala Parser Combinators make it doable for regular human beings. You can easily describe how to parse simple things like identifier, string constant or argument list, and then combine these simple parsers into more comples ones. I’d like to describe here step-by-step how to get that brilliant library working for you. No deep theory or specific features, just bare minimum to get started with typical tasks.</description>
    </item>
    
    <item>
      <title>Java Enums in Play Json</title>
      <link>https://paul-lysak.github.io/posts/2016-02-07-java-enums-in-play-json/</link>
      <pubDate>Sun, 07 Feb 2016 08:05:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2016-02-07-java-enums-in-play-json/</guid>
      <description>I prefer using Java Enums even in Scala code, because unlike Scala enums they’re distinguished by actual type, not just type parameter. Thus they still can be distinguished after type erasure, while all Scala enums look as the same type to JVM (at least without such tricks as type tags). Unfortunately, Play doesn’t have built-in support for Java enum serialization/deserialization to/from JSON at the moment (v. 2.4.2). But it’s pretty easy to write generic code that extends to any enum you want.</description>
    </item>
    
    <item>
      <title>Play Json date format customization</title>
      <link>https://paul-lysak.github.io/posts/2015-12-03-play-json-date-format-customization/</link>
      <pubDate>Thu, 03 Dec 2015 08:41:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-12-03-play-json-date-format-customization/</guid>
      <description>By default Play Json just truncates time zone when working with ZonedDateTime from Java 8. So the following code:
case class MyClass(createdAt: ZonedDateTime)
implicit val myWrites = Json.writes[MyClass]
...
val d = MyClass(ZonedDateTime.parse(&#34;2015-10-01T12:13:14.00+02:00&#34;))
val json = Json.toJson(d)
 would produce following Json: {&#34;createdAt&#34;: &#34;2015-10-01T12:13:14&#34;}. That’s because play.api.libs.json.DefaultWrites.DefaultZonedDateTimeWrites uses same formatter as DefaultLocalDateTimeWrites and simply disregards time zone. To display the time zone together with date time you’ll need to add following code before myWrites:</description>
    </item>
    
    <item>
      <title>javaOptions in sbt integration tests</title>
      <link>https://paul-lysak.github.io/posts/2015-11-13-javaoptions-in-sbt-integration-tests/</link>
      <pubDate>Fri, 13 Nov 2015 08:40:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-11-13-javaoptions-in-sbt-integration-tests/</guid>
      <description>My goal was to make separate config files for run, tests, and integration tests in Play application - so that default settings for database in run and integration test environments would be different, and in tests database settings would be unavailable to make sure that no unit test works with real DB. This may be achieved via config.resource system property. I’ve tried to apply solution from http://stackoverflow.com/questions/15399161/how-do-i-specify-a-config-file-with-sbt-0-12-2-for-sbt-test with such code in build.</description>
    </item>
    
    <item>
      <title>Scala traits internals or what needs to be recompiled</title>
      <link>https://paul-lysak.github.io/posts/2015-04-18-scala-traits-internals-or-what-needs-to/</link>
      <pubDate>Sat, 18 Apr 2015 16:07:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-04-18-scala-traits-internals-or-what-needs-to/</guid>
      <description>I was wondering if classes inherited from traits need to be recompiled if trait code changes, so I’ve investigated a bit traits internals - how are they represented after compilation. I’d like to share some observations.
Suppose we have file SuperTrait1.scala:
trait SuperTrait1 {
def doOp1(): Unit = {
println(&#34;do op1 V1&#34;)
}
}
 SuperTrait2.scala:
trait SuperTrait2 {
def doOp2(): Unit = {
println(&#34;do op2 V1&#34;)
}
}
 and SubClass.</description>
    </item>
    
    <item>
      <title>Futures and blocking in Scala</title>
      <link>https://paul-lysak.github.io/posts/2015-03-20-futures-and-blocking-in-scala/</link>
      <pubDate>Fri, 20 Mar 2015 17:04:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-03-20-futures-and-blocking-in-scala/</guid>
      <description>Quite often I see around ignorance about core concept around Futures in Scala: transition from synchronous to asynchronous code and back, execution context configuration and so on. I’ve shot myself in the leg with same mistakes once, and then had to dive into the details and make the picture clear for myself. Here I’d like to share some lessons learned and make Futures a little less “magic”.
Let’s remind ourselves some basic primitives Just to make sure we’re on the same page.</description>
    </item>
    
    <item>
      <title>SBT integration tests: automatically launch application</title>
      <link>https://paul-lysak.github.io/posts/2015-02-07-sbt-integration-tests-automatically/</link>
      <pubDate>Sat, 07 Feb 2015 14:16:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-02-07-sbt-integration-tests-automatically/</guid>
      <description>I’d like to share my experience in automatic launch of tested web application in SBT (tested with version 0.13.6) before running integration tests and shutting it down after tests. That wasn’t very straight-forward and involved custom tasks creation. I’d be happy to hear about easier ways if you know some.
SBT documentation about testing describes how to enable integration tests and run custom code before them via testOptions in IntegrationTest += Tests.</description>
    </item>
    
    <item>
      <title>Iteratees raison d&#39;être</title>
      <link>https://paul-lysak.github.io/posts/2015-01-02-iteratee-raison-detre/</link>
      <pubDate>Fri, 02 Jan 2015 19:17:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2015-01-02-iteratee-raison-detre/</guid>
      <description>Iteratees were pretty hard concept to grasp for me. Thanks to nice article http://mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans/ I managed to understand what it is and how it works, but event then it wasn’t clear for me why one may need it - mentioned features seem to be achievable with simpler tools like Scala lazy Streams (http://scala-lang.org/api/current/#scala.collection.immutable.Stream) and RxScala observables (http://reactivex.io/documentation/observable.html):
Backpressure (produce data with such speed that consumer has time to process it) - lazy Streams do exactly this thing: element of Stream isn’t evaluated until someone attempts to retrieve it.</description>
    </item>
    
    <item>
      <title>Sbt repository authentication</title>
      <link>https://paul-lysak.github.io/posts/2014-12-16-sbt-repository-authentication/</link>
      <pubDate>Tue, 16 Dec 2014 15:53:00 +0200</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2014-12-16-sbt-repository-authentication/</guid>
      <description>Here is brief instruction how to access repositories protected by basic authentication from sbt - checked with version 0.13. That&#39;s how one would configure custom repository in .sbt file: resolvers ++= Seq(
..
&#34;MyRepositoryName&#34; at &#34;http://repository.host.com/nexus/content/repositories/releases&#34;,
...
)
 If repository requires authentication - sbt would just show rather meaningless warning and claim that artifact isn&#39;t found: [warn] ==== MyRepositoryName: tried
[warn] http://repository.host.com/nexus/content/repositories/releases/... here goes path to artifact ...
 You&#39;ll need to know authentication realm returned by repository server in order to configure credentials.</description>
    </item>
    
    <item>
      <title>Scala protected methods aren&#39;t that much protected</title>
      <link>https://paul-lysak.github.io/posts/2014-08-19-scala-protected-methods-arent-that-much/</link>
      <pubDate>Tue, 19 Aug 2014 13:20:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2014-08-19-scala-protected-methods-arent-that-much/</guid>
      <description>Just discovered weird behavior of Scala&#39;s protected methods: they&#39;re actually compiled to public methods in byte-code. Therefore if you try to override them in Java code with another protected method compilation will fail with something like this: &#34;attempting to assign weaker access privileges; was public&#34;. After some googling I&#39;ve discovered that other people also spotted this issue. I think such weird compiler behavior was needed because of access level mismatch in Scala and Java - but I thought that Scala&#39;s protected is more restrictive then Java&#39;s.</description>
    </item>
    
    <item>
      <title>Integration test sources with eclipse-sbt</title>
      <link>https://paul-lysak.github.io/posts/2014-07-06-integration-test-sources-with-eclipse/</link>
      <pubDate>Sun, 06 Jul 2014 14:32:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2014-07-06-integration-test-sources-with-eclipse/</guid>
      <description>Finally found this answer: http://stackoverflow.com/questions/23229864/how-can-i-show-a-source-directory-to-sbteclipse-without-adding-it-to-the-compile to a question: how to include integration test sources in Scala IDE (Eclipse) - just add the following line to your build.sbt: EclipseKeys.configurations := Set(Compile, Test, IntegrationTest) </description>
    </item>
    
    <item>
      <title>HTTPS client with Finagle: short reference</title>
      <link>https://paul-lysak.github.io/posts/2013-09-17-https-client-with-finagle-short/</link>
      <pubDate>Tue, 17 Sep 2013 22:32:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2013-09-17-https-client-with-finagle-short/</guid>
      <description>It wasn&#39;t obvious for me how to make HTTPS calls with Finagle so I&#39;d like to share key points here: When building client: explicitly specify correct port (typically 443 instead of 80)When building client: enable TLS using ClientBuilder.tls(...) or ClientBuilder.tlsWithoutValidation() methodWhen making actual call: specify HTTPS protocol in requested URLIn practice you&#39;ll get something like this: 
 val client = ClientBuilder()
.codec(Http())
.hosts(&#34;yourServer:443&#34;)
.tls(&#34;yourServer&#34;)
.build()
val httpRequest = RequestBuilder().url(&#34;https://yourServer/somePath&#34;).buildGet</description>
    </item>
    
    <item>
      <title>How to shoot yourself in the foot with Scala traits and Spring</title>
      <link>https://paul-lysak.github.io/posts/2013-07-08-how-to-shoot-yourself-in-foot-with/</link>
      <pubDate>Mon, 08 Jul 2013 17:24:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2013-07-08-how-to-shoot-yourself-in-foot-with/</guid>
      <description>Suppose you have some class MyService configured as Spring bean: 
@Component
class MyService extends MyBaseService {
def myOperation() {
...
}
}
 Which is referenced somewhere in the project: 
...
@Autowired
private var myService: MyService = _
...
 So far this code works, and now you&#39;d like to mix in some trait into your service to add common functionality: 
@Component
class MyService extends MyBaseService with MyTrait {</description>
    </item>
    
    <item>
      <title>Default parameter values in Scala</title>
      <link>https://paul-lysak.github.io/posts/2013-06-17-default-parameter-values-in-scala/</link>
      <pubDate>Mon, 17 Jun 2013 17:06:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2013-06-17-default-parameter-values-in-scala/</guid>
      <description>I&#39;ve just discovered funny thing about default parameter values in Scala. If you call a function without parenthesis default values can&#39;t be applied and compilation fails. If you have such function: 
def hello(name: String = &#34;world&#34;) {
println(&#34;hello, &#34;+name)
}
Then this would fail to compile: 
hello
and this would compile and run well: 
hello()
 </description>
    </item>
    
  </channel>
</rss>