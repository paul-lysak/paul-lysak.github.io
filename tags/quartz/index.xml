<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quartz on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</title>
    <link>https://paul-lysak.github.io/tags/quartz/</link>
    <description>Recent content in Quartz on Ambiguous Implicits - Paul Lysak&#39;s blog about programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Mar 2012 11:38:00 +0300</lastBuildDate>
    
	<atom:link href="https://paul-lysak.github.io/tags/quartz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beware of SchedulerFactoryBean</title>
      <link>https://paul-lysak.github.io/posts/2012-03-30-beware-of-schedulerfactorybean/</link>
      <pubDate>Fri, 30 Mar 2012 11:38:00 +0300</pubDate>
      
      <guid>https://paul-lysak.github.io/posts/2012-03-30-beware-of-schedulerfactorybean/</guid>
      <description>Recently I&#39;ve discovered unpleasant side effect of org.springframework.scheduling.quartz.SchedulerFactoryBean which results to instable behaviour. It implements FactoryBean interface, so by default if you reference it in your context it returns Scheduler instance instead of the factory itself. But Scheduler instance creation is triggered by SchedulerFactoryBean.afterPropertiesSet(), and factory can&#39;t return Scheduler at all until it has been fully initialized.
See the point? Suppose we have some cyclic reference in the context and SchedulerFactoryBean relies on some other beans (for example, they may be needed for initial state configuration), and some of those other beans relies on scheduler in order to do some job later.</description>
    </item>
    
  </channel>
</rss>